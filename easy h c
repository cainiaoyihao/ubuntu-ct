
  extern的使用    

在外部函数上的使用：  在定义函数时，如果冠以关键字extern，则表示此函数是外部函数，可以被其他的文件调用，
如果定义函数时省略extern，则隐含为外部函数。所以除非定义函数时用static修饰(表示内部函数，其他文件不得调用)，
否则都是外部函数，别的模块（文件）都可以调用。一般来说在使用别的文件定义的函数时，要使用extern声明，
但在很多系统中不用extern声明，直接使用也没问题，但这不属于标准写法。1是因为容易让人闹不明白。2是因为编译器在处理函数
调用代码时就找不到函数原型,只好根据函数调用代码做隐式声明。而隐式声明往往是靠不住的。



Extern的问题在于不知道这个关键词出现的时候到底是声明还是定义。
谨记：声明可以多次，定义只能一次。



通常，在模块的头文件中对本模块提供给其它模块引用的函数和全局变量以关键字extern声明。
例如，如果模块B欲引用该模块A中定义的全局变量和函数时只需包含模块A的头文件即可。
这样，模块B中调用模块A中的函数时，在编译阶段，模块B虽然找不到该函数，但是并不会报错；
它会在连接阶段中从模块A编译生成的目标代码中找到此函数。

若本文件 引用别的文件中的全局变量  一定要加上extern 声明一下
这样在 工程的头文件中就不需要考虑 先#include 哪个文件了





函数的声明extern关键词是可有可无的，因为函数本身不加修饰的话就是extern的。但是引用的时候一样是需要声明的。
而全局变量在外部使用声明时，extern关键词是必须的，如果变量无extern修饰且没有显式的初始化，编译器在处理函数
调用代码时就找不到函数原型,只好根据函数调用代码做隐式声明。

用 extern 声明外部函数
a. 定义函数时,在函数返回值类型前面加上 extern 关键字,表示此函数时外部函数,
可供其他文件调用,如 extern int func (int x,int y),C 语言规定,此时 extern 可以
省略,隐形为外部函数。
b. 调用此函数时,需要用 extern 对函数作出声明。
即把被调用函数的作用域
作用域:
使用 extern 声明能够在一个文件中调用其他文件的函数,
扩展到本文件。


同样成为变量的定义，因此此时必须加extern，而编译器在此标记存储空间在执行时加载如内存并初始化为0。
而局部变量的声明不能有extern的修饰，且局部变量在运行时才在堆栈部分分配内存。 




编译预处理的过程中　对伪指令和特殊符号进行处理。宏指令，条件编译，头文件包含，特殊符号
其执行顺序是按照源程序的先后顺序进行处理，先遇见什么就执行什么，
头文件在什么地方出现，就在什么地方载入源程序。
例如条件编译会向前搜索是否有定义，从而做出判定。
宏指令出现之后，就会对之后的进行替换。预处理结果中不会显示ｄｅｆｉｎｅ　。查看预处理结果可以通过　　gcc  -E  *.c  

空指针
//void (*func)(int)：
//void function(int a)
//{
//  a = 5;
//}
//void (*pfunc)(int); 
//(float *fp 表明*fp是一个浮点数,也就是fp是一个浮点数的指针.)
//pfunc是一个函数指针，它的返回类型为空，它所指向的函数接收一个int型的参数。
//若是写成void *func(int)则变成了:func是一个函数，它的返回类型是空指针，它接受一个int型参数。
//指针函数和函数指针

